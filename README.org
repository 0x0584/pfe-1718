# ###########################
# # Org-mode version 9.1.5 ##
# # Emacs version 25.2.2   ##
# ###########################

#+DATE: 05/12/2018
# #+TITLE: Rapport de stage
#+AUTHOR: Anas Rchid
#+EMAIL: rchid.anas@gmail.com
#+LANGUAGE: fr

#+OPTIONS: toc:nil
#+LaTex_CLASS: report
#+LaTeX_CLASS_OPTIONS: [12pt,a4paper,twoside]
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LATEX_HEADER: \usepackage[margin=1.20in]{geometry}
#+LaTeX_HEADER: \hypersetup {
#+LaTeX_HEADER:	    colorlinks,
#+LaTeX_HEADER:	    citecolor=black,
#+LaTeX_HEADER:	    filecolor=black,
#+LaTeX_HEADER:	    linkcolor=blue,
#+LaTeX_HEADER:	    urlcolor=blue
#+LaTeX_HEADER: }
# pastie is a good one
# xcode is good
# trac
# paraiso_light
#+LaTeX_HEADER: \usemintedstyle{default}
# [[./front.pdf]]
#+LaTeX_HEADER: \usepackage{fancyhdr}
#+LaTeX_HEADER: \pagestyle{fancy}
#+LaTeX_HEADER: \fancyhf{}
#+LaTeX_HEADER: \fancyhead[L]{\rightmark}
#+LaTeX_HEADER: \fancyhead[R]{\thepage}

#+LATEX_COMPILER: pdflatex
#+LATEX: \tableofcontents
#+LATEX: \listoffigures
#+LATEX: \listoflistings

#+BEGIN_EXPORT latex
\begin{abstract}

Ce projet est le résultat d'un stage que j'avais passé chez la {\it Faculté des Lettres et Science Humaines}, El Jadida sous le thème {\it informatiser le service Ressources Humaines}. Sous l'encadrement de {\bf Mr. A. Madani}, et la supervision du chef de service; {\bf Mr. Driss Dibaji}.\\

Je tiens à remercier toutes les personnes qui ont contribué au succès de mon stage et qui m'ont aidé lors de la rédaction de ce rapport.\\

Tout d'abord, j'adresse mes remerciements au mes professeurs, {\bf Mr. A. Madani}, {\bf Mr. S. Riffi}, {\bf Mr. A. Silkan} et finalemment {\bf Mme S. Belqziz}, qui m'a beaucoup aidé pendant cette formation, ca serait un grand plaisire.\\

Je tiens à remercier vivement mon maitre de stage, {\bf Mr D. Dibaji}, chef du service Ressources Humaines au sein de la {\it Faculté des Lettres et Science Humaines}, El Jadida, pour son accueil, le temps passé ensemble et le partage de son expertise au quotidien. Grâce aussi à sa confiance j'ai pu m'accomplir totalement dans mes missions. Il fut d'une aide précieuse dans les moments les plus délicats.\\

Enfin, je tiens à remercier toutes les personnes qui m'ont conseillé et relu lors de la rédaction de ce rapport de stage : ma famille, mon ami {\bf H. Hamza} et {\bf B. Aya}.\\
\end{abstract}
#+END_EXPORT

* Intoduction
  \vspace*{\fill}
  #+BEGIN_QUOTE
  Pour obtenir ce besoin, j'avais la responsabilité de développer un environnement pour gérer les différents taches décrites en [[Cahier des Charges][cahier des charges]]\\
  #+END_QUOTE

  #+BEGIN_QUOTE
  Pour realiser cela, il y a deux parties. Stockage des données et l'application bureau. Pour la première, j'ai choisi /XML/; un langage markup écrit dans un fichier texte. Tout simplement parce qu'il est simple à utiliser et/ou modifier ainsi qu'il gratuit. Et pour la deuxième, j'ai développé une application en /Java/, car il est un langage Oriente-Objet qui facilite le processus de développement.
  #+END_QUOTE

  \vspace*{\fill}

* Cahier des Charges

  \vspace*{\fill}
  #+BEGIN_QUOTE
  D'après son nom, /Service des ressources humaines/ est un service qui est responsable de la gestion des employés et fonctionnaires, leurs diplômes et grades, ainsi que donner des attestations du travail et des autorisations de congé, suivi d'absence, rémunération du travail les jours fériés et finalement une notation annuelle.\\
  #+END_QUOTE

  Donc, on en déduit que le /cahier des charges/ est le suivant :\\

  + Implémenter un système de gestion des employés/fonctionnaires
  + Gérer les diplômes et les grades
  + Suivi des grades
  + Suivi d'absence
  + Suivi de rémunération du travail les fériés
  + Générer des attestations de travail
  + Générer des autorisations de congé
  + Générer des fiches de notation annuelle
  \vspace*{\fill}

* Conception
** Stockage des données en XML
   Les données sont stockées dans un fichier =XML=, =data/xml/hr.xml=  puisqu'il est lisible à la fois par la machine et l'humain. Au suivant, les règles du gestion est schéma général du fichier.

*** Règles de gestion du fichier =XML=
    Le root-tag est =<Employee>= et qui contient plusieurs tags de type =<employee>= qui représente des employées. Chaque tag =<employee>= contient un seul tag =<personal>= et un seul tag =<administrative>= qui peut contient =0= ou plusieurs tags =<uplift>=. Le tag =<employee>= peut aussi avoir =0= ou plusieurs tags de type =<diploma>=, =<medicalcertif>= et =<repayment>=.\\

    Voici la signification de chaque tag des tags déclaré ci-dessus:

    + =<Employee>= :: le root-tag, qui contient les tags =employee=
    + =<employee>= :: contient tout les information d'un employé particulier est il avait deux attributes:
    + *reference* identifiant du employé
    + *departement* département du employé. Certains employés n'appartient à aucun département. Ce sont des /fonctionnaire/
    + =<personal>= :: contient des informations personnelle comme le /nom/, /prénom/, /date de naissance/, etc.
    + =<administrative>= :: contient des informations administrative comme le /SOM/, /CIN/, etc.
    + =<uplift>= :: contient les informations des avancements dans le grade, /date/, /indice/, /échelon/ et /échelle/. Ce tag avais un seul attribut.
    + *id* identifiant du avancement par rapport au avancement précédant
    + =<diploma>= :: contient les informations sur les diplômes, /titre/, /mention/, /institue/ et /session/. Ce tag a aussi un seul attribue, ainsi que l'enfant =<title>=.
    + *id* identifiant du diplôme
    + *mention* la mention du diplôme (dans le tag =<title>=)
    + =<medicalcertif>= :: contient les informations sur certification médical, /date du certification/, /durée/ et /la période/.
    + *id* identifiant du certification médical.
    + =<repayment>= :: contient les informations sur les remboursements, /la période/, /nombre des jours à rembourser/ et /nombre des jours déjà remboursé/
    + *id* identifiant du remboursement

*** Schéma général du fichier
    #+CAPTION: Schéma général =XML= du fichier =data/xml/hr.xml=
    #+NAME: lis:hr-xml
    #+BEGIN_SRC xml -n
     <Employee>			<!--root-->
       <employee reference="" department="">

	 <notes />			 <!--les notes sur l'employé-->

	 <personal>			 <!--les informations personnelles-->
	 </personal>

	 <administrative>		<!--les informations administrative-->
	   <uplift id="" state="">	<!--les informations d'avancement-->
	   </uplift>

	   <uplift id="" state="" />	<!--nous pouvons avoir plus-->
	 </administrative>

	 <diplomas id="">		<!--les infomration du diplôme-->
	 </diplomas>
	 <diplomas id="" />		<!--nous pouvons avoir plus-->

	 <medicalcertif id="">	<!--information du certificat médical-->
	 </medicalcertif>
	 <medicalcertif id="" />	<!--nous pouvons avoir plus-->

	 <repayment id="">		<!--information du remboursement-->
	 </repayment>
	 <repayment id="" />		<!--nous pouvons avoir plus-->

       </employee>
     </Employee>
    #+END_SRC

** Les Paquets et leurs Classes

   Le code source de l'application est divisé en 4 paquets pricipales:

   + [[Paquet =model=][=model=]] :: contient les différentes classe pour mobilisé les donnée en objet
   + [[Paquet =app=][=app=]] :: contient les différentes énumération utilisées dans l'application. Ce paquet contient aussi [[Paquet =app.utils=][=app.utils=]], qui contient des utilitaires utiles pour le développement, notamment la gestion du [[Stockage des donn%C3%A9es en XML][fichier XML]].
   + [[Paquet =wins=][=wins=]] :: contient des interfaces graphiques, y compris celles qui sont responsables des opérations CRUD normales qui existent dans [[Paquet =wins.crud=][=wins.crud=]]
   + [[Paquet =views=][=views=]] :: contient des pages générées pour l'impression.

   \vspace*{\fill}
   #+CAPTION: Aperçu de code source du projet
   #+NAME:	  fig:overview
   #+ATTR_LATEX: :width 9cm :center t
   [[./diags/Overview.png]]

   \vspace*{\fill}
   #+LATEX: \clearpage

*** Paquet =model=

    Ce paquet contient les modèles de l'application, ce sont des classes =Java= pour modéliser les informations stockées dans le fichier XML [[Stockage des donn%C3%A9es en XML][=data/xml/hr.xml=]].

    #+CAPTION: La relation entre les classes du paquet [[Paquet =model=][=model=]] et la classe abstrait =XmlElement= du paquet [[Paquet =app.utils=][=app.utils=]]
    #+NAME:   fig:models
    #+ATTR_LATEX: :width 14cm :center t
    [[./diags/OverviewOnClasses.png]]

    Les classes implémentent les méthodes abstrais [[lis:xml-element][=getElement()=]], [[lis:xml-element][=add()=]], [[lis:xml-element][=update()=]] et [[lis:xml-element][=remove()=]] dans la classe générique [[lis:xml-element][=XmlElement=]]. Ces méthodes sont responsables de la selection, l'ajout, la mise à jour et la suppression du tag correspondant à l'objet concerné dans le [[Stockage des donn%C3%A9es en XML][fichier xml]]. \\

    Voici la classe mère de toutes les classes, [[lis:xml-element][=XmlElement=]], qui contient en addition, une chaine de caractères qui représente le référence de l'employé, c.-à-d. L'identifient

    #+CAPTION: Extrait du classe générique =XmlElement= du paquet [[Paquet =app.utils=][=app.utils=]]
    #+NAME: lis:xml-element
    #+BEGIN_SRC java -n
      import org.jdom2.Element;

      public abstract class XmlElement<T> {
	  public abstract boolean add();
	  public abstract boolean update(T updated);
	  public abstract boolean remove();
	  public abstract Element getElement();

	  /* référence du employé */
	  protected String empl_ref;
	  public String getEmployeeReference( ) {
	      return empl_ref;
	  }

	  public void setEmployeeReference(String ref) {
	      this.empl_ref = ref;
	  }
      }
    #+END_SRC

    Les méthodes [[lis:xml-element][=add()=]], [[lis:xml-element][=update()=]] et [[lis:xml-element][=remove()=]] de [[lis:xml-element][=XmlElement=]] retournent une valeur booléen, qui signifie est ce que l'opération a réussie ou non. Tandis que [[lis:xml-element][=getElement()=]] retourne le tag [[lis:hr-xml][=XML=]] correspondant a l'objet.\\

    La raison pour laquelle la classe est générique, c'est que [[lis:xml-element][=update()=]] doit l'être. La méthode [[lis:xml-element][=update()=]] prend un variable de type =T=, ce type est décrit avec un héritage du classe [[lis:xml-element][=XmlElement=]]. \\

    Par exemple, [[lis:xml-element][=update()=]] dans la classe [[fig:models][=Diploma=]] est la suivant :

    #+CAPTION: Extrait du classe [[fig:models][=Diploma=]] qui montre l'héritage de [[lis:xml-element][=XmlElement=]]
    #+NAME: lis:diploma
    #+BEGIN_SRC java  -n
      public class Diploma extends XmlElement<Diploma> {
	  /* les attributs du classe */

	  @Override
	  public boolean update(Diploma updated) {
	      /* process la mise à jour */
	  }
      }
    #+END_SRC

*** Paquet =app=

    Le paquet =app= contient que les énumérations, décrites dans le figure [[fig:app]].

    #+CAPTION: Les enumeration dans paquet =app=
    #+NAME:	  fig:app
    #+ATTR_LATEX: :width 14cm :center t
    [[./diags/OverviewOnApp.png]]


    + =Cadre= :: représente les cadres possibles pour un employé/fonctionnaire
    + =Mention= :: les mentions possibles pour un diplôme, utilisés dans [[Gestion des Dipl%C3%B4mes][=DilpomaCrud.java=]]
    + =Period= :: les différentes périodes utilisées dans l'application
    + =Holiday= :: utilisé dans [[La fen%C3%AAtre principale =MainWin=][=MainWin.java=]] pour la génération du congé
    + =SearchField= :: utilisé pour la recherche dans [[La fen%C3%AAtre principale =MainWin=][=MainWin.java=]]
    + =EmployeeType= :: utilisé pour filtrer les employé et fonctionnaire dans [[La fen%C3%AAtre principale =MainWin=][=MainWin.java=]]
    + =Files= :: contient des énumérations qui concernent les différents fichiers =XML= utilisé.

    #+LATEX: \clearpage

*** Paquet =app.utils=

    Alors, ce paquet contient des classes important pour l'application. Le diagramme des classes dans la figure [[fig:apputils0]] explique les différents relations entre ces classes et les classes de système de la d'interface graphique du =Java=.\\

    La classe [[lis:print][=Printer=]] est responsable de l'impression d'un =Component=, la classe des composants graphiques, avec l'aide de la méthode =static doPrint()= qui prend un =Component= comme paramètre.

    #+CAPTION: La relation entre =JTable=, =JTableListener=, et =Printer= du paquet =app.utils=
    #+NAME:   fig:apputils0
    #+ATTR_LATEX: :width 14cm :center t
    [[./diags/OverviewAppUtils0.png]]

    Aussi, [[lis:print][=Printer=]] a une implémentation de la méthode abstrait [[lis:print][=print()=]] de l'interface =Printable=, =doPrint()= faire un appel à cette méthode avec l'aide des autres classes du paquet =java.awt.print= comme =PrinterJob= et =PageFormat=. \\

    #+BEGIN_QUOTE
    /Note:/ Principalement, L'appelle de la méthode [[lis:print][=print()=]] se fait par la classe =PrinterJob()= du paquet =java.awt.print.PrinterJob=. La méthode utilise dans l'application c'est =static doPrint()=.\\
    #+END_QUOTE

    Au suivant, un extrait du classe [[lis:print][=Printer=]] qui montre l'implémentation de la méthode [[lis:print][=print()=]].

    #+CAPTION: Extrait de la classe =Printer= qui montre l'implémentation de la méthode abstrait =print()= de l'interface =java.awt.Printable=
    #+NAME: lis:print
    #+BEGIN_SRC java -n
      import java.awt.Component;
      import java.awt.Dimension;
      import java.awt.Graphics;
      import java.awt.Graphics2D;
      import java.awt.print.PageFormat;
      import java.awt.print.Printable;

      public class Printer implements Printable {
	  private final Component comp;
	  /**
	   ,* méthode abstrait dans l'interface java.awt.Printable, l'appelle
	   ,* se fait par la classe java.awt.PrinterJob
	   ,*
	   ,* @param g une graphique du classe java.awt.Graphics
	   ,* @param format formatage de la page à imprimer
	   ,* @param page_index l'index de la page
	   ,*
	   ,* @return intègre qui représente l'état de l'impression
	   ,*/
	  @Override
	  public int print(Graphics g, PageFormat format, int page_index) {
	      /* vérification du page, c'est un protocole de l'interface */
	      if (page_index > 0) return Printable.NO_SUCH_PAGE;

	      /* prend les dimensions du composant */
	      Dimension dim = comp.getSize( );
	      double cHeight = dim.getHeight( ), cWidth = dim.getWidth( );

	      /* initialization de demention du la zone d'impression */
	      double pHeight = format.getImageableHeight( );
	      double pWidth = format.getImageableWidth( );
	      double pXStart = format.getImageableX( );
	      double pYStart = format.getImageableY( );

	      /* la difference entre la taille du composant et la taille du
	       ,* page pour mettre le composant à l'échelle du page */
	      double xRatio = (pWidth / cWidth), yRatio = (pHeight / cHeight);

	      /* mettre le composant à jour avec la page à imprimer en utilisent
	       ,* la methode java.awt.Component.paint() */
	      Graphics2D g2 = (Graphics2D) g;
	      g2.translate(pXStart, pYStart);
	      g2.scale(xRatio, yRatio);
	      comp.paint(g2);
	      return Printable.PAGE_EXISTS;
	  }
      }
    #+END_SRC
    #+LATEX: \clearpage

    On revient à la figure [[fig:apputils0]], la classe [[lis:jtablelistener][=JTableCellListener=]] est responsable à réagir avec une modification qui passe au niveau des cellules d'un =JTable=. Cette classe est à l'écoute des modifications apportées aux données de la table via =TableCellEditor= du paquet =javax.swing.table= avec l'aide du interface =PropertyChangeListener= du paquet =java.beans=. Donc, doit implémenter la méthode [[lis:propchange][=propertyChange()=]] de l'interface mentionnée.\\


    #+CAPTION: Extrait du classe =JTableListener=
    #+NAME: lis:jtablelistener
    #+BEGIN_SRC java -n
      import java.awt.event.ActionEvent;

      import java.beans.PropertyChangeEvent;
      import java.beans.PropertyChangeListener;

      import javax.swing.Action;
      import javax.swing.JTable;
      import javax.swing.SwingUtilities;

      public class JTableCellListener implements PropertyChangeListener, Runnable {
	  private JTable table;
	  private Action action;
	  private int row;
	  private int column;
	  private Object oldValue;
	  private Object newValue;

	 /**
	  ,* @param table la table concerne
	  ,* @param action l'action a invoquée
	  ,*/
	  public JTableCellListener(JTable table, Action action) {
	      this.table = table;
	      this.action = action;

	      /* ajouter cette classe à la table pour l'invoquée */
	      this.table.addPropertyChangeListener(this);
	  }
      }
    #+END_SRC

    Lorsque l'édition est démarrée, la valeur de la cellule est enregistrée. Lorsque l'édition est arrêtée, la nouvelle valeur est enregistrée en tant que =Object=. Lorsque l'ancienne et la nouvelle valeur sont différentes, l'action fournie est invoquée. La classe doit appeller des classes selon l'état de l'édition, alors on doit aussi implémenter la méthode [[lis:run][=run()=]] dans l'interface =Runnable=. Au suivant un extrait du classe [[lis:jtablelistener][=JTableCellListener=]]. Par la suit, des extraits du classe et ses méthodes. \\

    La classe possède un constricteur privé qui prend en paramètre la table, numéro du ligne et colonne, et les deux valeurs, l'ancien et nouvelle. Ce constricteur est utilisé dans la méthode [[lis:propstart][=processEditingStopped()=]] pour créer une sauvegarde de la cellule concernée.

    #+CAPTION: L'implémentation du =propertyChange()= de l'interface =Printable= dans la classe [[lis:jtablelistener][=JTableListener=]]
    #+NAME: lis:propchange
    #+BEGIN_SRC java -n 30
      /**
       ,* Créé une copie du JTableCellListener avec une sauvegarde des
       ,* anciennes/nouvelles données ainsi que la ligne et la colonne
       ,*
       ,* @param row la ligne de la cellule modifiée
       ,* @param column la colonne de la cellule modifiée
       ,* @param oldValue l'ancienne valeur de la cellule modifiée
       ,* @param newValue nouvelle valeur de la cellule modifiée
       ,*/
      private JTableCellListener(JTable table, int row, int column,
				 Object oldValue, Object newValue) {
	  this.table = table;
	  this.row = row;
	  this.column = column;
	  this.oldValue = oldValue;
	  this.newValue = newValue;
      }

      /**
       ,* Implémentation de l'interface PropertyChangeListener
       ,*
       ,* @param e l'événement génère par le système
       ,*/
      @Override
      public void propertyChange(PropertyChangeEvent e) {
	  /* tester si l'évent vient d'après la classe TableCellEditor */
	  if ("tableCellEditor".equals(e.getPropertyName( ))) {
	      /* si la table est en coure de la modification */
	      if (table.isEditing( )) processEditingStarted( );
	      /* si l’edition est terminée */
	      else processEditingStopped( );
	  }
      }
    #+END_SRC

    La méthode [[lis:propchange][=JTable.isEditing()=]] indique l'état booléen du table, la valeur =true= indique que la table est en une modification actif, alors on fait un appel à [[lis:propstart][=processEditingStarted()=]]. Lorsque la méthode retourne la valeur =false=, on fait un appel au [[lis:propstart][=processEditingStopped()=]], qui est responsable de la vérification est ce que la valeur de la cellule a été modifie ou non par la comparaison entre [[lis:jtablelistener][=oldValue=]] et [[lis:jtablelistener][=newValue=]] dans la classe [[lis:jtablelistener][=JTableCellListener=]]. Si les valeurs sont différentes, on fait un appel à l'action du classe.

    #+CAPTION: Les fonctions =processEditingStarted()= et =processEditingStopped()= utilisées dans la méthode [[lis:propchange][=propertyChange()=]]
    #+NAME: lis:propstart
    #+BEGIN_SRC java -n 63
      /**
       ,* annoncer le démarrage du processus d'édition de cellule
       ,*/
      private void processEditingStarted( ) {
	  SwingUtilities.invokeLater(this);
      }

      /**
       ,* vérifier la cellule concernée
       ,*/
      private void processEditingStopped( ) {
	  /* sauvegardée la nouvelle valeur */
	  newValue = table.getModel( ).getValueAt(row, column);

	  /* si la nouvelle valeur est différente a l'ancienne valeur, alors */
	  if (!newValue.equals(oldValue)) {
	      JTableCellListener tcl;
	      ActionEvent event;

	      tcl = new JTableCellListener(getTable( ), getRow( ), getColumn( ),
					   getOldValue( ), getNewValue( ));
	      event = new ActionEvent(tcl, ActionEvent.ACTION_PERFORMED, "");

	      action.actionPerformed(event); /* exécuter l'action */
	  }
      }
    #+END_SRC

    #+CAPTION: L'implémentation du =run()= du classe [[lis:jtablelistener][=JTableListener=]]
    #+NAME: lis:run
    #+BEGIN_SRC java -n 89
      @Override
      public void run( ) {
	  row = table.convertRowIndexToModel(table.getEditingRow( ));
	  column = table.convertColumnIndexToModel(table.getEditingColumn( ));
	  oldValue = table.getModel( ).getValueAt(row, column);
	  newValue = null;
      }
    #+END_SRC

    Et finalement, il reste que l'implémentation de la méthode [[lis:run][=run()=]], qui est été appelée avec le protocole [[lis:propstart][=SwingUtilities.invokeLater()=]] dans [[lis:propstart][=processEditingStarted()=]]. Le rôle de cet appel est de récupérer la valeur actuelle de la cellule. \\

    \vspace*{\fill}
    #+BEGIN_QUOTE
    /Note: Le but du création de cette classe/ [[lis:jtablelistener][=JTableCellListener=]] /c'est que dans/ =Java= /il n'y a pas d'un listener native, ou par défaut qui suit l'état des cellules d'un/ =JTable=. \\
    #+END_QUOTE
    \vspace*{\fill}

    #+CAPTION: La relation entre =DateUtils=, =XmlFile= et =XmlElement=
    #+NAME:   fig:apputils1
    #+ATTR_LATEX: :width 14cm :center t
    [[./diags/OverviewAppUtils1.png]]
    #+LATEX: \clearpage

    La classe [[lis:dateu][=DateUtil=]] dans la figure [[fig:apputils1]] est utilisé pour la manipulation des dates, et la conversion des dates de/vers =String= avec l'aide du classe system [[lis:dateu][=SimpleDateFormat=]]. Pour les dates, j'ai choisi un format standard, =YYYY-MM-DD=, pour touts les dates dans le projet. \\

    #+CAPTION: Extrait de la classe =DateUtil=
    #+NAME: lis:dateu
    #+BEGIN_SRC java -n
      import java.text.ParseException;
      import java.text.SimpleDateFormat;
      import java.util.Date;

      public class DateUtil {
	  private SimpleDateFormat fmt;

	  public DateUtil() {
	      fmt = new SimpleDateFormat("yyyy-MM-dd");
	  }
      }
    #+END_SRC

    La classe [[lis:dateu][=DateUtil=]] contient une définition d'une méthode, [[lis:dateparse][=static parseDate()=]], qui a [[lis:dateparses][une surcharge]] pour la conversion de =Date= vers =String= et vice versa

    #+CAPTION: La méthode =parseDate()= de la classe [[lis:dateu][=DateUtil=]]
    #+NAME: lis:dateparse
    #+BEGIN_SRC java -n 12
      /**
       ,* Convertir une date vers une chaine des caractères
       ,*/
      public static String parseDate(Date date) {
	  try {
	      return new DateUtil( ).fmt.format(date);
	  } catch (ParseException e) {
	      System.err.println(e.getMessage( ));
	      return new DateUtil( ).fmt.format(new Date( ));
	  }
      }
    #+END_SRC

    La classe aussi contient la méthode [[lis:datediff][=static diffDays()=]] pour calculer le nombre des jours entre deux dates, avec une aide de la méthode [[lis:datedif][=static diff()=]]

    #+CAPTION: La définition de la méthode =diffDays()= de la classe [[lis:dateu][=DateUtil=]]
    #+NAME: lis:datediff
    #+BEGIN_SRC java -n
      /* voir la méthode diff() */
      public static long diffDays(Date from, Date to) {
	  return TimeUnit.MILLISECONDS.toDays(diff(from, to));
      }
    #+END_SRC
    #+LATEX: \clearpage

    #+CAPTION: La surcharge de la méthode =parseDate()= de la classe [[lis:dateu][=DateUtil=]]
    #+NAME: lis:dateparses
    #+BEGIN_SRC java -n
      /**
       ,* Convertir une chaine des caractères vers une Date
       ,*/
      public static Date parseDate(String str) {
	  Date d;

	  try {
	      d = new DateUtil( ).fmt.parse(str);
	  } catch (ParseException e) {
	      System.err.println(e.getMessage( ));
	      d = new Date( );
	  }

	  return d;
      }
    #+END_SRC

    #+CAPTION: La définition de la méthode =diff()= du classe [[lis:dateu][=DateUtil=]]
    #+NAME: lis:datedif
    #+BEGIN_SRC java -n
      /**
       ,* Calculé la différence de nombre des seconds
       ,* entre les deux dates
       ,*/
      public static long diff(Date from, Date to) {
	  if (from != null && to != null) {
	      return to.getTime( ) - from.getTime( );
	  } else return 0;
      }
    #+END_SRC

    Dans la figure [[fig:apputils1]] aussi, il y a la classe [[lis:xml][=XmlFile=]], la couche /DAO/ de l'application. Elle est responsable a tout interaction avec le [[Stockage des donn%C3%A9es en XML][fichier =XML=]].\\

    Avec l'aide de =static updateOrCreate()= on peut faire une mise à jour a une valeur d'un tag dans le fichier =XML=.

    #+BEGIN_SRC java -n
      public static void updateOrCreate(Element el, String node, String value) {
	  Element foo = el.getChild(node);

	  if (foo == null) {
	      el.addContent(new Element(node).addContent(value));
	      writeXml(el.getDocument( ));
	  } else {
	      foo.setText(value);
	  }
      }
    #+END_SRC

    #+CAPTION: Extrait de la classe =XmlFile= du paquet =app.utils=
    #+NAME: lis:xml
    #+BEGIN_SRC java -n
      import java.io.File;
      import java.io.IOException;

      import org.jdom2.Document;
      import org.jdom2.Element;
      import org.jdom2.JDOMException;
      import org.jdom2.input.SAXBuilder;

      import app.Files;

      public class XmlFile {
	  private String filepath;
	  private File file;
	  private Document doc;
	  private Element root;

	  public XmlFile(Files file) {
	      setFilePath(file.getFilePath( ));
	  }

	  /**
	   ,* A chaque fois on change l'emplacement du fichier, on doit
	   ,* initialiser le Document XML ainsi que la racine du document
	   ,*
	   ,* @param filepath l'emplacement du fichier
	   ,*/
	  public void setFilePath(String filepath) {
	      try {
		  this.file = new File(this.filepath = filepath);
		  if (file.exists( )) {
		      this.doc = new SAXBuilder( ).build(this.file);
		      this.root = doc.getRootElement( );
		  } else {
		      this.doc = new Document( );
		      this.root = new Element("Employee");
		  }
	      } catch (JDOMException | IOException e) {
		  System.out.println(e.getMessage( ));
	      }
	  }

      }
    #+END_SRC
    #+LATEX: \clearpage

    Et en peut aussi sauvegarder les changements dans le fichier avec la méthode =static write Xml()=.

    #+CAPTION: Définition de la méthode =writeXml= de la classe [[lis:xml][=XmlFile=]]
    #+BEGIN_SRC java -n
      /**
       ,* Écrire une instance de la classe Document dans un fichier XML
       ,*
       ,* @param doc le Document XML
       ,* @param f les fichiers systèmes de l'application
       ,*
       ,* @return true si l'écriture est successive
       ,*/
      public static boolean writeXml(Document doc, Files f) {
	  try {
	      XMLOutputter xmlout = new XMLOutputter( );
	      xmlout.setFormat(Format.getPrettyFormat( ));
	      xmlout.output(doc, new FileWriter(f.getFilePath( )));
	      System.err.println("success " + f.getFilePath( ));
	      return true;
	  } catch (IOException e) {
	      System.err.println(e.getMessage( ));
	      return false;
	  }
      }
    #+END_SRC

    La classe [[lis:xml][=XmlFile=]] est basée sur un paquet =Java= appelée [[http://jdom.org/][=JDOM=]], ce dernier contient des classes important comme :\\

    + =Element= :: la représentation des tags XML en objet
    + =Document= :: la représentation du document XMl en objet
    + =SAXBuilder= :: pour initialiser les instances =Document=
    + =XMLOutputter= :: pour l'écriture de =Document= et fichier réal

* L'Interface Graphique
** La relation entre les différents Paquets graphiques

   \vspace*{\fill}
   #+CAPTION: Aperçu général sur les interfaces graphiques utilisé dans l'application
   #+NAME: fig:gui
   [[./diags/OverviewOnWinsAnd.png]]
   \vspace*{\fill}

   #+LATEX: \clearpage

*** Paquet =wins=
**** La fenêtre principale =MainWin=

     Dans la partie supérieure de la fenêtre, on voit des cases à cocher pour générer l'élément spécifie (voir la section de [[Paquet =views=][=views=]]), une zone du texte avec la sélection d'un attribue pour la recherche, c'est un [[Paquet =app=][=SearchField=]]. Au centre, il y a une table qui montre les informations des employés/fonctionnaires déjà existants.\\

     En bas, il y a des boutons pour afficher le [[Gestion des Employ%C3%A9s =InfoCrud=][dossier do chaque personne]], afficher la fenêtre de [[Gestion des Remboursements][suivi des remboursements]], afficher suivi les [[Gestion des Certificats M%C3%A9dicaux][certificats médicaux]], et [[La fen%C3%AAtre de suivi des avancements de grade =UpliftsWin=][suivi des avancements de grade]]. En bas à droite, il y a deux boutons, une pour actualiser et une pour générer [[Paquet =views=][la page correspondant]] aux cases cocher en haut, ainsi que deux autres cases à cocher pour la sélection de type de la personne affichée dans la table.\\

     #+CAPTION: Aperçu sur le démarrage de l'application
     #+NAME:   fig:mainwin-main
     #+ATTR_LATEX: :width 14cm :center t
     [[./diags/MainWin.png]]

**** La fenêtre de suivi des avancements de grade =UpliftsWin=

     Dans la figure [[fig:uplifts-win]], on voit que la fenêtre contient deux parties : \\

     + En haut :: Les avancements à venir dans la durée sélectionnée avec l'aide de la boîte combo. On peut aussi afficher les informations de la personne avec le bouton à droite.\\
     + En bas :: Les avancements que leur temps est venu et en attente d'une confirmation. On peut confirmer par le bouton à droite.

      #+LATEX: \clearpage
      #+CAPTION: Aperçu sur le suivi des avancements de grade
      #+NAME:	fig:uplifts-win
      #+ATTR_LATEX: :width 14cm :center t
      [[./diags/UpliftsWin.png]]

      Après la comfirmation d'un avancement, une [[Gestion des Grades][fenetre]] s'ouvert pour ajouter les informations du avancement.

      #+LATEX: \clearpage
*** Paquet =wins.crud=
    #+BEGIN_QUOTE
    /Toutes les formes suivantes avaient le même princip des données du texte (ou combos) qui permet de la modification de employé éxistant déjà, l'ajout d'un nouveau pour la suppression d'un ancien./ \\
    #+END_QUOTE

**** Gestion des Employés =InfoCrud=

     C'est la fenêtre qui permet de changer les informations de chaque employé ou fonctionnaire. En haut, on voit la place de l'image, au centre on voit les zones de textes pour la modification des informations divisées en trois sections, les informations personnelles, administrative et autres (qui contient des informations additionnelle comme le nom et prénom en arabe).

     Pour l'image, le programme lit une image qui doit existe dans le répertoire =data/imgs= et contient le même CIN de l'employé concerné.

     #+CAPTION: Aperçu sur la ficher des informations personnelle et administrative
     #+NAME:   fig:uplifts-win
     #+ATTR_LATEX: :width 14cm :center t
     [[./diags/InfoWin.png]]
     #+LATEX: \clearpage
**** Gestion des Remboursements
     #+ATTR_LATEX: :width 10cm :center t
     [[./diags/repay.png]]
**** Gestion des Diplômes

     #+NAME: fig:dips
     #+ATTR_LATEX: :width 10cm :center t
     [[./diags/dips.png]]

**** Gestion des Certificats Médicaux
     #+ATTR_LATEX: :width 11cm :center t
     [[./diags/certifs.png]]

**** Gestion des Grades

     #+ATTR_LATEX: :width 11cm :center t
     [[./diags/upliftsmod.png]]
     #+LATEX: \clearpage

*** Paquet =views=
    Ce paquet est intialisé par les information du employé, voici un example:

[[./diags/att.png]]

* Dépendances
  # + Java/XML :: [[https://fr.wikibooks.org/wiki/Programmation_Java/XML][{1}]] [[https://cynober.developpez.com/tutoriel/java/xml/jdom/][{2}]]
  + JDOM :: http://jdom.org/ Bibliothèque =Java= pour analyser XML
  + WebLaF :: [[http://weblookandfeel.com/]] Bibliothèque =Java= pour améliorer l'apparence
