#+TITLE: Informatiser le service Ressources Humaines chez la Faculté des Lettres et Science Humaines
#+AUTHOR: Rchid Anas

# Antibes Boadilla Frankfurt Juanlespins
# Montpellier Singapore Bergen Copenhagen
# Goettingen Madrid Malmoe Rochester
# Pittsburgh Berlin Dresden Ilmenau Marburg
# Paloalto Warsaw Berkeley Darmstadt Hannover

#+STARTUP: beamer
#+LaTeX_CLASS_OPTIONS: [a4paper,twoside]
#+LaTeX_CLASS_OPTIONS: [captions=tableheading]
#+LATEX_HEADER: \usepackage{charter}
#+LATEX_HEADER: \usetheme{Frankfurt}
#+LATEX_HEADER: \useinnertheme{circles}
# #+LATEX_HEADER: \useoutertheme{split}
#+LATEX_HEADER: \usecolortheme{seagull}

#+LATEX_HEADER: \definecolor{UBCblue}{rgb}{0.04706, 0.13725, 0.26667} % UBC Blue (primary)
#+LATEX_HEADER: \definecolor{UBCgrey}{rgb}{0.3686, 0.5255, 0.6235} % UBC Grey (secondary)
#+LATEX_HEADER: \definecolor{UBCblack}{rgb}{0.011, 0.011, 0.011} % UBC Blue (primary)

#+LATEX_HEADER: \usecolortheme[named=UBCblue]{structure}
# #+LATEX_HEADER:\setbeamercolor{palette primary}{bg=UBCblue,fg=white}
#+LATEX_HEADER:\setbeamercolor{palette secondary}{bg=UBCblue,fg=white}
#+LATEX_HEADER:\setbeamercolor{palette tertiary}{bg=UBCblue,fg=white}
#+LATEX_HEADER:\setbeamercolor{palette quaternary}{bg=UBCblack,fg=white}

#+LATEX_HEADER: \usepackage[margin=0.85in]{geometry}
#+LaTeX_CLASS: beamer
# #+MACRO: BEAMERMODE presentation
# #+MACRO: BEAMERTHEME Antibes
# #+MACRO: BEAMERCOLORTHEME lily
# #+MACRO: BEAMERSUBJECT RMRF
# #+MACRO: BEAMERINSTITUTE Miskatonic University, Astrology Dept.
# #+BEAMER_HEADER: \title[short title]{long title}
# #+LaTeX_HEADER: \hypersetup {
# #+LaTeX_HEADER:	    colorlinks,
# #+LaTeX_HEADER:	    citecolor=black,
# #+LaTeX_HEADER:	    filecolor=black,
# #+LaTeX_HEADER:	    linkcolor=gray,
# #+LaTeX_HEADER:	    urlcolor=gray
# #+LaTeX_HEADER: }
#+LATEX_COMPILER: pdflatex

#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+BEAMER_FRAME_LEVEL: 2
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+LaTeX_HEADER: \usemintedstyle{default}
#+OPTIONS: toc:nil
#+OPTIONS: author:t date:nil
#+LATEX: \tableofcontents
#+LATEX: \clearpage

* Introduction
** Introduction

   #+BEGIN_QUOTE
   Ce projet est le résultat d'un stage que j'avais passé chez la /Faculté des Lettres et Science Humaines/, El Jadida sous le thème /Informatiser le service Ressources Humaines/. Sous l'encadrement de Mr. A. Madani, et la supervision du chef de service; Mr. Driss Dibaji.\\
   #+END_QUOTE

* Cahier des Charges
** Cahier des Charges
   Un service qui est responsable de la gestion des employés et fonctionnaires, leurs diplômes et grades...\\
   \pause

   #+BEGIN_QUOTE
   + Implémenter un système de gestion des employés/fonctionnaires \pause
   + Gérer les diplômes et les grades \pause
   + Suivi des grades \pause
   + Suivi d'absence \pause
   + Suivi de rémunération du travail les fériés \pause
   + Générer des attestations de travail \pause
   + Générer des autorisations de congé \pause
   + Générer des fiches de notation annuelle
   #+END_QUOTE

* Conception
** Conception
*** Stockage des données en XML

    \pause
    Les données sont stockées dans un fichier =XML=; \pause *puisqu'il est lisible à la fois par la machine et l'humain*.\\

    \pause\\

    #+BEGIN_QUOTE
    + Le root-tag est =<Employee>= et qui contient *=0= ou plusieurs* tags de type =<employee>= qui représente des employées. \\
    \pause
    + Chaque tag =<employee>= contient *un seul* tag =<personal>= et *un seul* tag =<administrative>= qui peut contient *=0= ou plusieurs* tags =<uplift>=. \\
    \pause
    + Le tag =<employee>= peut aussi avoir *=0= ou plusieurs* tags de type =<diploma>=, =<medicalcertif>= et =<repayment>=.\\
    #+END_QUOTE

** Les Paquets et leurs Classes
   #+LATEX: \clearpage

   Le code source de l'application est divisé en 4 paquets pricipales: \pause

   + =model= :: contient les différentes classe pour mobilisé les donnée en objet \pause
   + =app= :: contient les différentes énumération utilisées dans l'application. \pause Ce paquet contient aussi  =app.utils=, qui contient des utilitaires utiles pour le développement, notamment la gestion du *fichier XML* \pause
   + =wins= :: contient des interfaces graphiques, y compris celles qui sont responsables des opérations CRUD normales qui existent dans =wins.crud= \pause
   + =views= :: contient des pages générées pour l'impression.

** Paquet =app=
   Ce paquet contient que les énumérations \pause
   #+ATTR_LATEX: :width 7cm :center t
   [[./diags/OverviewOnApp.png]]
** Paquet =app.utils=
   #+ATTR_LATEX: :width 7cm :center t
   [[./diags/OverviewAppUtils1.png]]

** La classe =XmlFile=
   #+BEGIN_QUOTE
   =XmlFile=, la couche /DAO/ de l'application. Elle est responsable a tout interaction avec le fichier =XML=. Elle est basée sur un paquet =Java= appelée =JDOM=.
   #+END_QUOTE

*** Les composant de JDOM

    + =Element= :: la représentation des tags XML en objet
    + =Document= :: la représentation du document XML en objet
    + =SAXBuilder= :: pour initialiser les instances =Document=
    + =XMLOutputter= :: pour l'écriture de =Document= et fichier réal
** Les méthodes de la classe =XmlFile=
   #+BEGIN_QUOTE
    En peut sauvegarder les changements dans le fichier XML avec la méthode =static write Xml()=.
   #+END_QUOTE

*** Définition de la méthode
    #+BEGIN_SRC java -n
      public static boolean writeXml(Document doc, Files f) {
	  try {
	      XMLOutputter out = new XMLOutputter( );
	      out.setFormat(Format.getPrettyFormat( ));
	      out.output(
		  doc, new FileWriter(f.getFilePath( )));
	      return true;
	  } catch (IOException e) {
	      return false;
	  }
      }
    #+END_SRC
** Les méthodes de la classe =XmlFile=
   #+BEGIN_QUOTE
   Avec l'aide de =static updateOrCreate()= on peut faire une mise à jour a une valeur d'un tag dans le fichier =XML=.
   #+END_QUOTE
*** Définition de la méthode
    #+BEGIN_SRC java -n
      public static void updateOrCreate(Element el,
					String node,
					String value) {
	  if (el.getChild(node) == null) {
	      el.addContent(
		  new Element(node).addContent(value));
	      writeXml(el.getDocument( ));
	  } else {
	      el.getChild(node).setText(value);
	  }
      }
    #+END_SRC
** La classe =XmlElement=
   #+ATTR_LATEX: :width 5cm :center t
   #+BEGIN_SRC java -n
      public abstract class XmlElement<T> {
	  public abstract boolean add();
	  public abstract boolean update(T updated);
	  public abstract boolean remove();
	  public abstract Element getElement();

	  /* référence du employé */
	  protected String empl_ref;
	  public String getEmployeeReference( ) {
	      return empl_ref;
	  }

	  public void setEmployeeReference(String ref) {
	      this.empl_ref = ref;
	  }
      }
   #+END_SRC

** La classe =DateUtil=
   #+BEGIN_QUOTE
   La classe =DateUtil= est utilisé pour la manipulation des dates, et la conversion des dates de/vers =String= avec l'aide du classe system =SimpleDateFormat=. Pour les dates, j'ai choisi un format standard, =YYYY-MM-DD=, pour touts les dates dans le projet.
   #+END_QUOTE

*** Extrait de la classe
    #+BEGIN_SRC java -n
      public class DateUtil {
	  private SimpleDateFormat fmt;

	  public DateUtil() {
	      fmt = new SimpleDateFormat("yyyy-MM-dd");
	  }
      }
    #+END_SRC


** Suite du Paquet =app.utils=
   Ce paquet contient des classes important pour l'application. \pause
   #+ATTR_LATEX: :width 9cm :center t
   [[./diags/OverviewAppUtils0.png]]

** La classe =Printer=

   #+BEGIN_QUOTE
   La classe =Printer= est responsable de l'impression d'un =Component= (la classe des composants graphiques) avec l'aide de la méthode =static doPrint()= qui prend un =Component= comme paramètre.
   #+END_QUOTE
   \pause

*** Example de l'appel
    #+BEGIN_SRC java
     import app.utils.Printer;

     Printer.doPrint(/* le composant graphique */);
    #+END_SRC
    \pause
*** Implémentation de l'interface =java.awt.Printable=

    #+BEGIN_QUOTE
    Aussi, =Printer= a une implémentation de la méthode abstrait =print()= de l'interface =Printable=
    #+END_QUOTE

** Extrais de la classe =Printer=
*** L'implémentation du =print()=

    #+BEGIN_SRC java -n
      public class Printer implements Printable {
	  private final Component comp;
	  public Printer(Component comp) {
	      this.comp = comp;
	  }
	  @Override
	  public int print(Graphics g, PageFormat format,
			   int page_index) {
	      if (page_index > 0)
		  return Printable.NO_SUCH_PAGE;
	      /* ... */
	      return Printable.PAGE_EXISTS;
	  }
      }
    #+END_SRC

** La classe =JTableCellListener=
   #+BEGIN_QUOTE
   Cette classe est responsable à réagir avec une modification qui passe au niveau des cellules d'un =JTable=. Cette classe est à l'écoute des modifications apportées aux données de la table via =TableCellEditor= du paquet =javax.swing.table= avec l'aide du interface =PropertyChangeListener= du paquet =java.beans=.
   #+END_QUOTE
   \pause

*** Principe de listener
    #+BEGIN_QUOTE
    Lorsque l'édition est démarrée, la valeur de la cellule est enregistrée. Lorsque l'édition est arrêtée, la nouvelle valeur est enregistrée en tant que =Object=. Lorsque l'ancienne et la nouvelle valeur sont différentes, l'action fournie est invoquée.
    #+END_QUOTE
** Extrais de la classe =JTableCellListener=
*** Les attribut de la classe =JTableCellListener=
    #+BEGIN_SRC java -n
     public class JTableCellListener implements
				     PropertyChangeListener,
				     Runnable {
	 private JTable table;
	 private Action action;
	 private int row, column;
	 private Object oldValue, newValue;
     }
    #+END_SRC

** Les constricteurs de la classe =JTableCellListener=
   #+BEGIN_QUOTE
   Le constructeur par défaut utilisé pour créer un /Listener/, prend la table correspondante et une action.
   #+END_QUOTE

*** Constructeur public
    #+BEGIN_SRC java -n
  public JTableCellListener(JTable table,
			    Action action) {
      this.table = table;
      this.action = action;
      // ajouter cette classe au Listener du table
      this.table.addPropertyChangeListener(this);
  }
    #+END_SRC

** Les constricteurs de la classe =JTableCellListener=
   #+BEGIN_QUOTE
   Ce constricteur est utilise dans la methode =processEditingStopped()= pour intialise une instance de la classe déclenché pour réagir à l'événement.
   #+END_QUOTE
*** Constructeur privé
    #+BEGIN_SRC java -n
      private JTableCellListener(JTable table,
				 int row, int column,
				 Object oldValue,
				 Object newValue) {
	  this.table = table;
	  this.row = row;
	  this.column = column;
	  this.oldValue = oldValue;
	  this.newValue = newValue;
      }
    #+END_SRC

** Implémentation de l'interface =PropertyChangeListener=

   #+BEGIN_QUOTE
   La classe =JTableCellListener= doit contient une implementation a la	 methode =propertyChange()=
   #+END_QUOTE
   \pause

*** Extrais de l'implementation

    #+BEGIN_SRC java -n
      @Override
      public void propertyChange(PropertyChangeEvent e) {
	  String prop_name = "tableCellEditor";
	  boolean isediting = this.table.isEditing( );

	  if (prop_name.equals(e.getPropertyName( ))) {
	      if (isediting) processEditingStarted( );
	      else processEditingStopped( );
	  }
      }
    #+END_SRC
** Suite de l'implementation de =PropertyChangeListener=
*** Au démarrage de la processus d'édition
    #+BEGIN_SRC java -n
     private void processEditingStarted( ) {
	 SwingUtilities.invokeLater(this);
     }
    #+END_SRC
    \pause
*** La relation avec l'interface =Runnable=
    #+BEGIN_QUOTE
Aussi, on est besoin de réagir avec des événements par exécuté des actions, donc on doit implémenter la méthode =run()= qui est été appelée avec le protocole =SwingUtilities.invokeLater()= dans =processEditingStarted()=.
    #+END_QUOTE

** Implémentation de l'interface =Runnable=
   #+BEGIN_QUOTE
   Le rôle de cet appel est de récupérer la valeur actuelle de la cellule.
   #+END_QUOTE
*** Mettre à jour les valeurs de la classe =JTableCellListener=
    #+BEGIN_SRC java -n
      @Override
      public void run( ) {
	  row = table.convertRowIndexToModel(
	      table.getEditingRow( ));
	  column = table.convertColumnIndexToModel(
	      table.getEditingColumn( ));

	  oldValue = table.getModel( ).getValueAt(
	      row, column);
	  newValue = null; /* réinitialisation */
      }
    #+END_SRC

** À la fin de la processus d'édition
   #+BEGIN_SRC java -n
     private void processEditingStopped( ) {
	 newValue = table.getModel( ).getValueAt(row, column);
	 if (!newValue.equals(oldValue)) {
	     action.actionPerformed(
		 new ActionEvent(
		     new JTableCellListener(
			 table, row, column,
			 oldValue, NewValue
		     ),
		     ActionEvent.ACTION_PERFORMED,
		     "JTableCellEditor"
		 )
	     );
	 }
     }
   #+END_SRC

** Paquet =model=

   #+ATTR_LATEX: :width 11cm :center t
   [[./diags/classes.png]]


** Héritage de la classe =XmlElement=

   #+BEGIN_QUOTE
   La méthode =update()= prend un variable de type =T=,\pause ce type est décrit avec un héritage de la classe =XmlElement= \pause
   #+END_QUOTE

   #+NAME: lis:diploma
   #+BEGIN_SRC java  -n
      public class Diploma extends XmlElement<Diploma> {
	  /* les attributs du classe */
	  @Override
	  public boolean update(Diploma updated) {
	      try {
		  /* process la mise à jour */
		  return true;
	      } catch (Exception e) {
		  System.err.println(e.getMessage());
		  return false;
	      }
	  }
      }
   #+END_SRC
* L’Interface Graphique
** L’Interface Graphique
*** La relation entre les différents Paquets graphiques
* Dépendances
